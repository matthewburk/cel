{"name":"Cel","tagline":"Embeddable Lua GUI","body":"Cel is free software: it may be used for any purpose, including commercial purposes, at absolutely no cost.\r\nCel is licensed under the terms of the MIT license\r\n\r\nCopyright (C) 2011 by Matthew W. Burk\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n1. Cel is not in control, it is driven by the host program.  This is the prime directive.\r\n2. Cel will not impose dependencies.\r\n3. Cel will enable, but not enforce sandboxing.  The host process must do some work to realize this, otherwise requirements 1 and 2 would be broken. This requirement was inspired by how World of Warcraft allowed user defined plugins to manipulate the gui.\r\n4. Cel will not define how or when rendering occurs, see requirements 1 and 2.\r\n5. Cel shall not impose or require fragile rules.  For example unlinking acel will always work. Seems obvious, but many gui libraries do not worklike this.\r\n6. All cels are created equal.  Meaning all cels follow the same rules, so there is not a special cel that is a container, all cels are containers.  A specialized cel can add functionality, but not alter the basics.  This goesa long way towards meeting requirent 5.\r\n7. A cel will not expose functions or state that will compromise any of the requirements.  This is requriement is to realize requirement 5.  The most apparent consequnce of this requirement is that there is no way to get to a cel you don't already have a reference to, unless it is explicitly provied for by a container, or the host process. For instance there is no cel.gethost() function, this is to enforce both sandboxing and non-fragility.  For example a composite cel may depend on the presence of the cels it is composed of.  To ensure this a composite cel will not expose the individual cels and never need worry about the state of those cels being modified externally. What this means in practice is that I can create cels and compose them and give access to only the host cel.  The host process may provide a way to query a cel by name or some other method, but the interals of that host cel known only to the host cel.\r\n  \r\n\r\n<a href=\"documentation/cel/cel.html\">cel</a>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}