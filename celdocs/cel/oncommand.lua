namespace 'celdocs'

export[...] {
  eventdef['cel:oncommand'] {
    description = [[Signaled when a command is generated by the driver.]];

    synopsis = [==[
      cel:oncommand(comand, data, intercepted)
    ]==];

    params = {
      param.cel[[self - self]];
      param.any[[command - Identifies the command.]];
      param.any[[data - Data associated to the command.]];
      param.boolean[[intercepted - If a link of the cel saw this event and intercepted it this will be true.  
                     If the event was not intercepted this will be nil.]];
    };

    returns = {
      param.boolean[[intercepted - Return true to intercept the event.  This will indicate to any host
      cels that see the event has been intercepted, generally meaning some action was taken.]];
    };
  };

  notes {
    [[The cel will recieve the event if it had the keyboard focus when the event was signaled.]];
    [[Three commands are defined and have no data associated to them:  'cut', 'copy', 'paste'.  Each indicates that the
      corresponding clipboard action should be taken.]];
    [[For any other command the host application determines what commands to send and assigns meaning to them.]];
    [[Intercepting the event will not stop the event from propogating, it simply sets the intercepted parameter to
      true for any other event handler that sees the event.]];
  };

  examples {
    [==[
    --TODO
    ]==];
  };
}
